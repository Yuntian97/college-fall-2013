			Topics and Guidance for Exam 01 in 
			       Com S 342 Fall2013

This exam covers topics from homeworks 1-5.

REMINDERS

For this test, you can use one (1) page (No bigger than 8.5 x 11 inch size, 
two (2) sides, no less than 9pt font) of notes, aka "cheat sheet".  Handwriting 
is okay.  No photo-reduction is permitted. These notes are to be handed in at the
end of the test.  Have your name in the top right corner.  Use of
other notes or failure to follow these instructions will be considered
cheating.

This test is paper-based and timed.  We will *not* grade your test 
if you try to take more than the time allowed.  Therefore, before 
you begin, please take a moment to look over the entire test so 
that you can budget your time. We will also not grade your test if
you try to use resources (electronic or otherwise) that you are 
not allowed to use. 

For programs, indentation is important to us for ''clarity'' points;
if your code is sloppy or hard to read, you will lose points.
Correct syntax also matters.  Check your code over for syntax errors.
You will lose points if your code has obvious syntax errors.

You can use helping procedures (auxiliary procedures) in your code
whenever you like. 

[ Memorizing the entire DrRacket functions is not going to be necessary
for the purpose of this exam, although you are expected to be familiar
with common functions, e.g. those that operate on standard data-types
lists, pairs, etc.]

READINGS

- language design discussion

Related to this discussion you should read chapter 1, especially
section 1.1 (pages 1-30) of the recommended textbook Structure and
Interpretation of Computer Programs, by Abelson and Sussman, which is
on reserve and also on-line at http://mitpress.mit.edu/sicp/.  For a
reference on Scheme, see the Revised^6 Report on Scheme, which is
available in several formats. 

- Structure And Interpretation Of Computer Programs
      (Sections 1.1.1-1.1.6, 1.2.1, 1.3, 2.2.1-2.2.2, and 2.3.1)
  (see http://mitpress.mit.edu/sicp/full-text/book/)

- The Little Schemer (p. xiii, chapters 1-5)

- Revised^6 Report On The Algorithmic Language Scheme
  (Sections 1 [Overview], Section 4.2, and 6.1-6.3 [Standard Procedures])

- Essentials of Programming Languages (3rd edition)
   (Chapters 1, and Sections 2.1-2.3)

TOPICS

Topics marked + below are more important than topics marked - below.
Topics marked ++ have a high probability of being on the exam.
In general, things that are more like the homework will be more important.
Example problems are marked in [square-brackets].

* Language design, goals

        + Means of computation, combination, and abstraction.
           + You should be able to give examples of these in
             Scheme, C++, and Java.
             [Example: means of combination, means of abstraction]

        + Differences between Java and Scheme syntax (if, begin, etc.,)
          [Example: translate into Scheme notation, means of combination in Java (or C++)]

        - Static vs. dynamic type checking
           - advantages and disadvantages of each
           - how each matches design goals of Scheme vs. Java/C++

* Data types
        - how to describe abstract data types:
                abstract values, external form,
                literals, operations, special forms

        ++ built-in types in Scheme, especially booleans, lists, numbers, and symbols
                - (other types, e.g., strings, vectors are less important)
                - (you don't need to know all the details of
                   operations we haven't used in homework)


* Expressions in the Scheme Programming Language

        + translate algebraic notation into Scheme notation
          [Example: translate into Scheme notation]

        + write Scheme code to:
          + give definitions
            [Example: define x and y]
          + compute conditionals (using if or cond)
            [Example: comparison between x and y]
          + make symbols
            [Example: experiment with quote (')]
          + construct lists and pairs (improper lists)
            using either cons, or list, and numbers and quoted symbols
            [Example: construct lists]
          + extract parts of lists
            [Example: extract parts of lists]

        + evaluate expressions using define, cons, car, cdr, list,
          eq?, equal?, etc.

        + Know when to use eq? vs. equals?

        - explain the difference between strings and symbols in Scheme
          [Example: what can you do with string that can't be done with a symbol?]

        - procedure terminology:
                 procedure (Scheme), function (math), application, combination
                 operator, operand, subexpressions,
                 arguments, parameters

* Procedure as Abstraction and Higher-order Procedures

        ++ Write procedures that:

           ++ extract and rearrange parts of a list

           ++ recursively test the elements of a list for some property
               [Example: list-of-numbers?]

	+ what lambda does
	+ first-class values
	
	++ Know what does it mean to curry a procedure
          [see hw05-closure-currying-illustrated.rkt]
        
	++ Know how the concept of "closure" is related to the 
	   procedural-based data type representation
	   [functional set, step]
   
    ++ write a procedure dealing with lists of lists
      [Example: matrix-to-vector]

        ++ write procedures that manipulate other procedures
	   (higher-order procedures)
	   [Example: foldl, map-reduce, list-of-all?, set-exists?...]

* Syntax Abstraction

	+ Be able to use "let" in Scheme programs
	- Be able to determine the values of expressions using them.
	- Know how to desugar expressions in Scheme
	  for the sugars: let, and, or, cond 
          and how to use the sugars to abbreviate the desugared forms.
	  (You should also know that letrec is a syntactic sugar, but I won't
	  test you on the details or how to desugar a letrec.)

	- Know an example of a syntactic sugar
	  (and the corresponding desugared forms) in some other
	  language, such as C++, C, Java, etc.
          [Example: example of syntactic sugar]
         
    ++ Be able to define syntactic abstractions using define-syntax 
	   and define-syntax-rules
	  [Example] for, seq, while

* Data Abstraction, Recursively Specified Data (1.1)

** Inductive Specifications
       - Be able to inductively define a set of data items

** Grammars, BNF
       + Be able to read a grammar

       + Be able to tell whether a sentence is in a grammar

       + Write recursive grammar rules 

       ++ Read recursive grammar rules 

       ++ Being able to count "kinds of data" in a grammar

* Recursively Specified Programs (1.2)

  ** Recursion following a grammar
        ++ Know the steps to take to solve recursive programming problems.

  *** recursion over flat lists
        + Be able to tell if a procedure "follows the grammar" for
          flat lists
          [Example: Following the structure of input for flat lists]

        + Understand recursive procedures over lists and be able to
          explain what they do.

        ++ Write Scheme programs that do recursions over flat lists
          [Example: frequency, insert-at, max, prime, list-has-primes, 
	            carpet]

        ++ Know when to express patterns of recursion in terms of
           map, fold, filter, etc...
        

  *** recursion over other grammars
       ++ Write Scheme programs that work on a new grammar
       [Ex: move for the <step> grammar]

* Data Abstraction (Chapter 2)

** Specifying Data via Interfaces (2.1)

	+ What is an interface?

    - What is a specification?
       [Example: env specification]

	+ What is the importance of data abstraction?
		Can you give examples?  (Both positive and negative ones)

	+ What is the importance of representation independence?
		Can you give examples?  (Both positive and negative ones)
                [type checking and abstraction]
          (e.g.: what is the importance of representation independence; 
	  	 what are data structure-based rep, procedural-based rep, of
		 data types?  give example)

	+ How does the type of an ADT's operations relate to the types
		of the implementation's operations?
		[set-ops]

** Representation Strategies for Data Types (2.2)

        ++ Be able to implement an ADT using a data structure representation
          [Lecture: Numbers, Environment 
           Lecture: Arithmetic and binary expressions
           Example: trees as Lists]         

        ++ Be able to implement an ADT using a procedural representation
          [Lecture/Example: Procedural Representation of Environment
           Example: Procedural Representation of <step>
           Example: Procedural Representation of <set>]
          

        + Be able to change the representation strategies such that the change
          maintains the interface/specification 
           [Example: <step> implemented using data representation strategy
                            and procedural representation strategy]



** Interfaces for Recursive Data Types (2.3)
            
         ++ Be able to state the different kinds of data for a
         given data type.
         [Example: environment, step ]
         
         
         ++ Be able to implement the constructors, predicates and extractors
         for an ADT based on its BNF using lists.
           [Example: step]
         
         ++ Be able to implement the constructors, predicates and extractors
         for an ADT based on its BNF using procedural representation.
           [Example: step, set]
